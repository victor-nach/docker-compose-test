{"version":3,"sources":["../../src/todos/routes.js"],"names":["router","express","Router","route","get","getAllTodos","returnResponse","post","validate","body","schema","createTodo","delete","clearTodos","all","getOneTodo","patch","patchTodo","deleteTodo","req","res","next","locals","todos","db","todoTable","catch","err","rows","clear","status","order","position","todo","create","getById","params","id","errors","NotFound","Object","assign","updatedTodo","update","deleteById","baseUrl","protocol","json"],"mappings":"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","file":"routes.js","sourcesContent":["import express from 'express';\nimport { validate } from 'isvalid';\nimport { errors } from 'express-simple-errors';\nimport transformResponse, { schema } from './model'; // eslint-disable-line no-unused-variables\nimport db from '../db';\nconst todoTable = 'todos';\n\nexport default function ()  {\n  const router = express.Router();\n\n  router.route('/')\n    .get(getAllTodos, returnResponse)\n    .post(validate.body(schema), createTodo, returnResponse)\n    .delete(clearTodos, returnResponse);\n\n  router.route('/:id')\n    .all(getOneTodo)\n    .get(returnResponse)\n    .patch(patchTodo, returnResponse)\n    .delete(deleteTodo, returnResponse);\n\n  async function getAllTodos(req, res, next) {\n    res.locals.todos = await db.all(todoTable)\n    .catch((err) => next(err));\n    next();\n  }\n\n  async function clearTodos(req, res, next) {\n    const rows = await db.clear(todoTable)\n    .catch((err) => next(err));\n    res.locals.todos = rows;\n    res.status(204);\n    next();\n  }\n\n  async function createTodo(req, res, next) {\n    if (req.body.order) {\n      req.body.position = req.body.order;\n      delete req.body.order;\n    }\n    const todo = await db.create(todoTable, req.body)\n    .catch((err) => next(err));\n    res.locals.todo = todo[0];\n    res.status(201);\n    next();\n  }\n\n  async function getOneTodo(req, res, next) {\n    const todo = await db.getById('todos', req.params.id)\n    .catch((err) => next(err));\n    res.locals.todo = todo && todo[0];\n    if (!res.locals.todo) {\n      return next(new errors.NotFound('This todo does not exist'));\n    }\n    next();\n  }\n\n  async function patchTodo(req, res, next) {\n    const todo = Object.assign({}, res.locals.todo[0], req.body);\n    if (todo.order) {\n      todo.position = todo.order;\n      delete todo.order;\n    }\n\n    const updatedTodo = await db.update(todoTable, req.params.id, todo)\n    .catch((err) => next(err));\n    res.locals.todo = updatedTodo[0];\n    next();\n  }\n\n  async function deleteTodo(req, res, next) {\n    res.locals.todo = await db.deleteById(todoTable, req.params.id)\n    .catch((err) => next(err));\n    res.status(204);\n    next();\n  }\n\n  function returnResponse(req, res) {\n    // handle no responses here\n    res.locals.baseUrl = `${req.protocol}://${req.get('host')}`;\n    res.json(transformResponse(res.locals));\n  }\n\n  return router;\n}\n"]}