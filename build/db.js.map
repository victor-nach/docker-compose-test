{"version":3,"sources":["../src/db.js"],"names":["conString","process","env","DATABASE_URL","query","qs","Promise","resolve","reject","pg","connect","err","client","done","Error","result","rows","normalizeValue","value","all","table","clear","create","params","assigns","Object","keys","values","map","getById","id","update","key","join","deleteById"],"mappings":";;;;;;AAAA;;;;;;AAEA,IAAIA,YAAYC,QAAQC,GAAR,CAAYC,YAA5B;;AAEA,SAASC,KAAT,CAAeC,EAAf,EAAmB;AACjB,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV;AAAA,WACjBC,aAAGC,OAAH,CAAWV,SAAX,EAAsB,UAACW,GAAD,EAAMC,MAAN,EAAcC,IAAd,EAAuB;AAC3C,UAAIF,GAAJ,EAAS,OAAOH,OAAO,IAAIM,KAAJ,CAAUH,GAAV,CAAP,CAAP;AACTC,aAAOR,KAAP,CAAaC,EAAb,EAAiB,UAACM,GAAD,EAAMI,MAAN,EAAiB;AAChC,YAAIJ,GAAJ,EAAS;AACPE;AACA,iBAAOL,OAAO,IAAIM,KAAJ,CAAUH,GAAV,CAAP,CAAP;AACD;AACDE;AACAN,gBAAQQ,OAAOC,IAAf;AACD,OAPD;AAQD,KAVD,CADiB;AAAA,GAAZ,CAAP;AAaD;;AAED,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC7B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,kBAAWA,KAAX;AACD;AACD,SAAOA,KAAP;AACD;;AAED,SAASC,GAAT,CAAaC,KAAb,EAAoB;AAClB,SAAOhB,yBAAuBgB,KAAvB,CAAP;AACD;;AAED,SAASC,KAAT,CAAeD,KAAf,EAAsB;AACpB,SAAOhB,uBAAqBgB,KAArB,CAAP;AACD;;AAED,SAASE,MAAT,CAAgBF,KAAhB,EAAuBG,MAAvB,EAA+B;AAC7B,MAAMC,UAAUC,OAAOC,IAAP,CAAYH,MAAZ,CAAhB;AACA,MAAMI,SAASF,OAAOE,MAAP,CAAcJ,MAAd,EAAsBK,GAAtB,CAA0B,UAACV,KAAD;AAAA,WAAWD,eAAeC,KAAf,CAAX;AAAA,GAA1B,CAAf;AACA,SAAOd,uBAAqBgB,KAArB,UAA+BI,OAA/B,kBAAmDG,MAAnD,mBAAP;AACD;;AAED,SAASE,OAAT,CAAiBT,KAAjB,EAAwBU,EAAxB,EAA4B;AAC1B,SAAO1B,yBAAuBgB,KAAvB,kBAAyCU,EAAzC,CAAP;AACD;;AAED,SAASC,MAAT,CAAgBX,KAAhB,EAAuBU,EAAvB,EAA2BP,MAA3B,EAAmC;AACjC,MAAIA,OAAOO,EAAX,EAAe,OAAOP,OAAOO,EAAd;AACf,MAAMN,UAAUC,OAAOC,IAAP,CAAYH,MAAZ,CAAhB;AACA,MAAMI,SAASH,QAAQI,GAAR,CAAY,UAACI,GAAD;AAAA,WAAYA,GAAZ,SAAmBf,eAAeM,OAAOS,GAAP,CAAf,CAAnB;AAAA,GAAZ,EAA8DC,IAA9D,CAAmE,IAAnE,CAAf,CAHiC,CAGwD;AACzF,SAAO7B,kBAAgBgB,KAAhB,aAA6BO,MAA7B,kBAAgDG,EAAhD,kBAAP;AACD;;AAED,SAASI,UAAT,CAAoBd,KAApB,EAA2BU,EAA3B,EAA+B;AAC7B,SAAO1B,uBAAqBgB,KAArB,oBAAyCU,EAAzC,CAAP;AACD;;kBAEc,EAACX,QAAD,EAAME,YAAN,EAAaC,cAAb,EAAqBY,sBAArB,EAAiCL,gBAAjC,EAA0CE,cAA1C,E","file":"db.js","sourcesContent":["import pg from 'pg';\n\nvar conString = process.env.DATABASE_URL;\n\nfunction query(qs) {\n  return new Promise((resolve, reject) => (\n    pg.connect(conString, (err, client, done) => {\n      if (err) return reject(new Error(err));\n      client.query(qs, (err, result) => {\n        if (err) {\n          done();\n          return reject(new Error(err));\n        }\n        done();\n        resolve(result.rows);\n      });\n    })\n  ));\n}\n\nfunction normalizeValue(value) {\n  if (typeof value === 'string') {\n    return `'${value}'`;\n  }\n  return value;\n}\n\nfunction all(table) {\n  return query(`SELECT * FROM ${table}`);\n}\n\nfunction clear(table) {\n  return query(`DELETE FROM ${table}`);\n}\n\nfunction create(table, params) {\n  const assigns = Object.keys(params);\n  const values = Object.values(params).map((value) => normalizeValue(value));\n  return query(`INSERT INTO ${table} (${assigns}) VALUES (${values}) RETURNING *`);\n}\n\nfunction getById(table, id) {\n  return query(`SELECT * FROM ${table} WHERE id=${id}`);\n}\n\nfunction update(table, id, params) {\n  if (params.id) delete params.id;\n  const assigns = Object.keys(params);\n  const values = assigns.map((key) => `${key}=${normalizeValue(params[key])}`).join(', '); // eslint-disable-line\n  return query(`UPDATE ${table} SET ${values} WHERE id=${id} RETURNING *`);\n}\n\nfunction deleteById(table, id) {\n  return query(`DELETE FROM ${table} WHERE id = ${id}`);\n}\n\nexport default {all, clear, create, deleteById, getById, update};\n"]}